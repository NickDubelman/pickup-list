// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NickDubelman/pickup-list/db/nbaplayer"
	"github.com/NickDubelman/pickup-list/db/predicate"
)

// NBAPlayerUpdate is the builder for updating NBAPlayer entities.
type NBAPlayerUpdate struct {
	config
	hooks    []Hook
	mutation *NBAPlayerMutation
}

// Where appends a list predicates to the NBAPlayerUpdate builder.
func (npu *NBAPlayerUpdate) Where(ps ...predicate.NBAPlayer) *NBAPlayerUpdate {
	npu.mutation.Where(ps...)
	return npu
}

// SetName sets the "name" field.
func (npu *NBAPlayerUpdate) SetName(s string) *NBAPlayerUpdate {
	npu.mutation.SetName(s)
	return npu
}

// Mutation returns the NBAPlayerMutation object of the builder.
func (npu *NBAPlayerUpdate) Mutation() *NBAPlayerMutation {
	return npu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (npu *NBAPlayerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(npu.hooks) == 0 {
		affected, err = npu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NBAPlayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			npu.mutation = mutation
			affected, err = npu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(npu.hooks) - 1; i >= 0; i-- {
			if npu.hooks[i] == nil {
				return 0, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = npu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (npu *NBAPlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := npu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (npu *NBAPlayerUpdate) Exec(ctx context.Context) error {
	_, err := npu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npu *NBAPlayerUpdate) ExecX(ctx context.Context) {
	if err := npu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (npu *NBAPlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nbaplayer.Table,
			Columns: nbaplayer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nbaplayer.FieldID,
			},
		},
	}
	if ps := npu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nbaplayer.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, npu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nbaplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NBAPlayerUpdateOne is the builder for updating a single NBAPlayer entity.
type NBAPlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NBAPlayerMutation
}

// SetName sets the "name" field.
func (npuo *NBAPlayerUpdateOne) SetName(s string) *NBAPlayerUpdateOne {
	npuo.mutation.SetName(s)
	return npuo
}

// Mutation returns the NBAPlayerMutation object of the builder.
func (npuo *NBAPlayerUpdateOne) Mutation() *NBAPlayerMutation {
	return npuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (npuo *NBAPlayerUpdateOne) Select(field string, fields ...string) *NBAPlayerUpdateOne {
	npuo.fields = append([]string{field}, fields...)
	return npuo
}

// Save executes the query and returns the updated NBAPlayer entity.
func (npuo *NBAPlayerUpdateOne) Save(ctx context.Context) (*NBAPlayer, error) {
	var (
		err  error
		node *NBAPlayer
	)
	if len(npuo.hooks) == 0 {
		node, err = npuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NBAPlayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			npuo.mutation = mutation
			node, err = npuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(npuo.hooks) - 1; i >= 0; i-- {
			if npuo.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = npuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (npuo *NBAPlayerUpdateOne) SaveX(ctx context.Context) *NBAPlayer {
	node, err := npuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (npuo *NBAPlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := npuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npuo *NBAPlayerUpdateOne) ExecX(ctx context.Context) {
	if err := npuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (npuo *NBAPlayerUpdateOne) sqlSave(ctx context.Context) (_node *NBAPlayer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nbaplayer.Table,
			Columns: nbaplayer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nbaplayer.FieldID,
			},
		},
	}
	id, ok := npuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing NBAPlayer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := npuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nbaplayer.FieldID)
		for _, f := range fields {
			if !nbaplayer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != nbaplayer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := npuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := npuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nbaplayer.FieldName,
		})
	}
	_node = &NBAPlayer{config: npuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, npuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nbaplayer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
