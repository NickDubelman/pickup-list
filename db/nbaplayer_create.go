// Code generated by entc, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NickDubelman/pickup-list/db/nbaplayer"
	"github.com/NickDubelman/pickup-list/db/user"
)

// NBAPlayerCreate is the builder for creating a NBAPlayer entity.
type NBAPlayerCreate struct {
	config
	mutation *NBAPlayerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (npc *NBAPlayerCreate) SetName(s string) *NBAPlayerCreate {
	npc.mutation.SetName(s)
	return npc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (npc *NBAPlayerCreate) SetUserID(id int) *NBAPlayerCreate {
	npc.mutation.SetUserID(id)
	return npc
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (npc *NBAPlayerCreate) SetNillableUserID(id *int) *NBAPlayerCreate {
	if id != nil {
		npc = npc.SetUserID(*id)
	}
	return npc
}

// SetUser sets the "user" edge to the User entity.
func (npc *NBAPlayerCreate) SetUser(u *User) *NBAPlayerCreate {
	return npc.SetUserID(u.ID)
}

// Mutation returns the NBAPlayerMutation object of the builder.
func (npc *NBAPlayerCreate) Mutation() *NBAPlayerMutation {
	return npc.mutation
}

// Save creates the NBAPlayer in the database.
func (npc *NBAPlayerCreate) Save(ctx context.Context) (*NBAPlayer, error) {
	var (
		err  error
		node *NBAPlayer
	)
	if len(npc.hooks) == 0 {
		if err = npc.check(); err != nil {
			return nil, err
		}
		node, err = npc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NBAPlayerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = npc.check(); err != nil {
				return nil, err
			}
			npc.mutation = mutation
			if node, err = npc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(npc.hooks) - 1; i >= 0; i-- {
			if npc.hooks[i] == nil {
				return nil, fmt.Errorf("db: uninitialized hook (forgotten import db/runtime?)")
			}
			mut = npc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, npc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (npc *NBAPlayerCreate) SaveX(ctx context.Context) *NBAPlayer {
	v, err := npc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npc *NBAPlayerCreate) Exec(ctx context.Context) error {
	_, err := npc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npc *NBAPlayerCreate) ExecX(ctx context.Context) {
	if err := npc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (npc *NBAPlayerCreate) check() error {
	if _, ok := npc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`db: missing required field "name"`)}
	}
	return nil
}

func (npc *NBAPlayerCreate) sqlSave(ctx context.Context) (*NBAPlayer, error) {
	_node, _spec := npc.createSpec()
	if err := sqlgraph.CreateNode(ctx, npc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (npc *NBAPlayerCreate) createSpec() (*NBAPlayer, *sqlgraph.CreateSpec) {
	var (
		_node = &NBAPlayer{config: npc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nbaplayer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nbaplayer.FieldID,
			},
		}
	)
	_spec.OnConflict = npc.conflict
	if value, ok := npc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nbaplayer.FieldName,
		})
		_node.Name = value
	}
	if nodes := npc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   nbaplayer.UserTable,
			Columns: []string{nbaplayer.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_nba_player = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NBAPlayer.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NBAPlayerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (npc *NBAPlayerCreate) OnConflict(opts ...sql.ConflictOption) *NBAPlayerUpsertOne {
	npc.conflict = opts
	return &NBAPlayerUpsertOne{
		create: npc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NBAPlayer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (npc *NBAPlayerCreate) OnConflictColumns(columns ...string) *NBAPlayerUpsertOne {
	npc.conflict = append(npc.conflict, sql.ConflictColumns(columns...))
	return &NBAPlayerUpsertOne{
		create: npc,
	}
}

type (
	// NBAPlayerUpsertOne is the builder for "upsert"-ing
	//  one NBAPlayer node.
	NBAPlayerUpsertOne struct {
		create *NBAPlayerCreate
	}

	// NBAPlayerUpsert is the "OnConflict" setter.
	NBAPlayerUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *NBAPlayerUpsert) SetName(v string) *NBAPlayerUpsert {
	u.Set(nbaplayer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NBAPlayerUpsert) UpdateName() *NBAPlayerUpsert {
	u.SetExcluded(nbaplayer.FieldName)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.NBAPlayer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *NBAPlayerUpsertOne) UpdateNewValues() *NBAPlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.NBAPlayer.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *NBAPlayerUpsertOne) Ignore() *NBAPlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NBAPlayerUpsertOne) DoNothing() *NBAPlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NBAPlayerCreate.OnConflict
// documentation for more info.
func (u *NBAPlayerUpsertOne) Update(set func(*NBAPlayerUpsert)) *NBAPlayerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NBAPlayerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *NBAPlayerUpsertOne) SetName(v string) *NBAPlayerUpsertOne {
	return u.Update(func(s *NBAPlayerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NBAPlayerUpsertOne) UpdateName() *NBAPlayerUpsertOne {
	return u.Update(func(s *NBAPlayerUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *NBAPlayerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NBAPlayerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NBAPlayerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NBAPlayerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NBAPlayerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NBAPlayerCreateBulk is the builder for creating many NBAPlayer entities in bulk.
type NBAPlayerCreateBulk struct {
	config
	builders []*NBAPlayerCreate
	conflict []sql.ConflictOption
}

// Save creates the NBAPlayer entities in the database.
func (npcb *NBAPlayerCreateBulk) Save(ctx context.Context) ([]*NBAPlayer, error) {
	specs := make([]*sqlgraph.CreateSpec, len(npcb.builders))
	nodes := make([]*NBAPlayer, len(npcb.builders))
	mutators := make([]Mutator, len(npcb.builders))
	for i := range npcb.builders {
		func(i int, root context.Context) {
			builder := npcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NBAPlayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, npcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = npcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, npcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, npcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (npcb *NBAPlayerCreateBulk) SaveX(ctx context.Context) []*NBAPlayer {
	v, err := npcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npcb *NBAPlayerCreateBulk) Exec(ctx context.Context) error {
	_, err := npcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npcb *NBAPlayerCreateBulk) ExecX(ctx context.Context) {
	if err := npcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.NBAPlayer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NBAPlayerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
//
func (npcb *NBAPlayerCreateBulk) OnConflict(opts ...sql.ConflictOption) *NBAPlayerUpsertBulk {
	npcb.conflict = opts
	return &NBAPlayerUpsertBulk{
		create: npcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.NBAPlayer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (npcb *NBAPlayerCreateBulk) OnConflictColumns(columns ...string) *NBAPlayerUpsertBulk {
	npcb.conflict = append(npcb.conflict, sql.ConflictColumns(columns...))
	return &NBAPlayerUpsertBulk{
		create: npcb,
	}
}

// NBAPlayerUpsertBulk is the builder for "upsert"-ing
// a bulk of NBAPlayer nodes.
type NBAPlayerUpsertBulk struct {
	create *NBAPlayerCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.NBAPlayer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *NBAPlayerUpsertBulk) UpdateNewValues() *NBAPlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.NBAPlayer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *NBAPlayerUpsertBulk) Ignore() *NBAPlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NBAPlayerUpsertBulk) DoNothing() *NBAPlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NBAPlayerCreateBulk.OnConflict
// documentation for more info.
func (u *NBAPlayerUpsertBulk) Update(set func(*NBAPlayerUpsert)) *NBAPlayerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NBAPlayerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *NBAPlayerUpsertBulk) SetName(v string) *NBAPlayerUpsertBulk {
	return u.Update(func(s *NBAPlayerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *NBAPlayerUpsertBulk) UpdateName() *NBAPlayerUpsertBulk {
	return u.Update(func(s *NBAPlayerUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *NBAPlayerUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("db: OnConflict was set for builder %d. Set it on the NBAPlayerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("db: missing options for NBAPlayerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NBAPlayerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
