// Code generated by entc, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NickDubelman/pickup-list/db/nbaplayer"
	"github.com/NickDubelman/pickup-list/db/user"
)

// NBAPlayer is the model entity for the NBAPlayer schema.
type NBAPlayer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NBAPlayerQuery when eager-loading is set.
	Edges           NBAPlayerEdges `json:"edges"`
	user_nba_player *int
}

// NBAPlayerEdges holds the relations/edges for other nodes in the graph.
type NBAPlayerEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NBAPlayerEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NBAPlayer) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case nbaplayer.FieldID:
			values[i] = new(sql.NullInt64)
		case nbaplayer.FieldName:
			values[i] = new(sql.NullString)
		case nbaplayer.ForeignKeys[0]: // user_nba_player
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NBAPlayer", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NBAPlayer fields.
func (np *NBAPlayer) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nbaplayer.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			np.ID = int(value.Int64)
		case nbaplayer.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				np.Name = value.String
			}
		case nbaplayer.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_nba_player", value)
			} else if value.Valid {
				np.user_nba_player = new(int)
				*np.user_nba_player = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the NBAPlayer entity.
func (np *NBAPlayer) QueryUser() *UserQuery {
	return (&NBAPlayerClient{config: np.config}).QueryUser(np)
}

// Update returns a builder for updating this NBAPlayer.
// Note that you need to call NBAPlayer.Unwrap() before calling this method if this NBAPlayer
// was returned from a transaction, and the transaction was committed or rolled back.
func (np *NBAPlayer) Update() *NBAPlayerUpdateOne {
	return (&NBAPlayerClient{config: np.config}).UpdateOne(np)
}

// Unwrap unwraps the NBAPlayer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (np *NBAPlayer) Unwrap() *NBAPlayer {
	tx, ok := np.config.driver.(*txDriver)
	if !ok {
		panic("db: NBAPlayer is not a transactional entity")
	}
	np.config.driver = tx.drv
	return np
}

// String implements the fmt.Stringer.
func (np *NBAPlayer) String() string {
	var builder strings.Builder
	builder.WriteString("NBAPlayer(")
	builder.WriteString(fmt.Sprintf("id=%v", np.ID))
	builder.WriteString(", name=")
	builder.WriteString(np.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NBAPlayers is a parsable slice of NBAPlayer.
type NBAPlayers []*NBAPlayer

func (np NBAPlayers) config(cfg config) {
	for _i := range np {
		np[_i].config = cfg
	}
}
