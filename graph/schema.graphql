type Query {
  user: User
  lists: [List!]!
  nbaPlayers: [NBAPlayer!]!

  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

type Mutation {
  createList(input: CreateListInput!): List!
  joinList(input: JoinListInput!): List!
  unjoinList(input: JoinListInput!): List!

  setUser(input: SetUserInput!): User!
}

type User implements Node {
  id: ID!
  realName: String!
  nbaName: String!
  email: String!
  createdAt: Time!

  nbaPlayer: NBAPlayer
  lists: [List!]!
}

type List implements Node {
  id: ID!
  name: String!
  createdAt: Time!

  users: [User!]!
  owner: User!
}

type NBAPlayer implements Node {
  id: ID!
  name: String!
}

input CreateListInput {
  name: String!
}

input JoinListInput {
  listID: ID!
}

input SetUserInput {
  realName: String!
  nbaName: String!
}

interface Node {
  id: ID!
}

scalar Time
