interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  real_name: String!
  nba_name: String!
  email: String!
  created_at: Time!

  lists: [List!]!
}

type List implements Node {
  id: ID!
  name: String!
  created_at: Time!

  users: [User!]!
  owner: User!
}

type Query {
  lists: [List!]!

  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
}

type Mutation {
  createList(input: CreateListInput!): List!
  joinList(input: JoinListInput!): List!
}

input CreateListInput {
  name: String!
}

input JoinListInput {
  listID: ID!
}

scalar Time
